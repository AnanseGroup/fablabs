working_directory "<%= current_path %>"
pid "<%= unicorn_pid %>"
stderr_path "<%= unicorn_log %>"
stdout_path "<%= unicorn_log %>"

listen "/tmp/unicorn.<%= application %>.sock"
worker_processes <%= unicorn_workers %>
timeout 15

preload_app true

# https://devcenter.heroku.com/articles/rails-unicorn
before_fork do |server, worker|
  Signal.trap 'TERM' do
    puts 'Unicorn master intercepting TERM and sending myself QUIT instead'
    Process.kill 'QUIT', Process.pid
  end

  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!
end

after_fork do |server, worker|
  Signal.trap 'TERM' do
    puts 'Unicorn worker intercepting TERM and doing nothing. Wait for master to send QUIT'
  end

  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end

# before_fork do |server, worker|
#   # Disconnect since the database connection will not carry over
#   if defined? ActiveRecord::Base
#     ActiveRecord::Base.connection.disconnect!
#   end
#
#   # Quit the old unicorn process
#   old_pid = "#{server.config[:pid]}.oldbin"
#   if File.exists?(old_pid) && server.pid != old_pid
#     begin
#       Process.kill("QUIT", File.read(old_pid).to_i)
#     rescue Errno::ENOENT, Errno::ESRCH
#       # someone else did our job for us
#     end
#   end
# end
#
# after_fork do |server, worker|
#   # Start up the database connection again in the worker
#   if defined?(ActiveRecord::Base)
#     ActiveRecord::Base.establish_connection
#   end
#   child_pid = server.config[:pid].sub(".pid", ".#{worker.nr}.pid")
#   system("echo #{Process.pid} > #{child_pid}")
# end
